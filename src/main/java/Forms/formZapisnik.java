/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import Controller.Controller;
import domain.object.entities.Potvrda;
import domain.object.entities.Zapisnik;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class formZapisnik extends javax.swing.JFrame {

    List<Zapisnik> zapisnici = new LinkedList<>();
    List<Zapisnik> pronadjeniZapisnici = new LinkedList<>();
    List<Potvrda> potvrde = new LinkedList<>();
    List<Potvrda> pronadjenePotvrde = new LinkedList<>();
    private Date originalDatum;
    private final HashMap<Integer, String[]> originalneVrednostiZapisnika = new HashMap<>();

    
    public formZapisnik() throws Exception {
        initComponents();
        setTitle("Zapisnik");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListenerZapisnik();
        
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtZapisnikId = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblZapisnik = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnSacuvajObjekat = new javax.swing.JButton();
        btnIzmeniObjekat = new javax.swing.JButton();
        btnObrisiObjekat = new javax.swing.JButton();
        cmbPotvrda = new javax.swing.JComboBox<>();
        cmbTipZapisnika = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtDatum = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Zapisnik");

        jLabel2.setText("Zapisnik Id");

        jLabel16.setText("Tip zapisnika");

        tblZapisnik.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Zapisnik iD", "Datum primopredaje", "Tip zapisnika", "Potvrda Id"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblZapisnik);

        jLabel6.setText("Potvrda Id");

        btnSacuvajObjekat.setText("Sacuvaj");
        btnSacuvajObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajObjekatActionPerformed(evt);
            }
        });

        btnIzmeniObjekat.setText("Izmeni");
        btnIzmeniObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniObjekatActionPerformed(evt);
            }
        });

        btnObrisiObjekat.setText("Obrisi");
        btnObrisiObjekat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiObjekatActionPerformed(evt);
            }
        });

        cmbPotvrda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbTipZapisnika.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Operativni zapisnik", "Pravni zapisnik", "Interni zapisnik" }));

        jLabel3.setText("Datum primopredaje");

        txtDatum.setText("dd-MM-yyyy");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtZapisnikId, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                    .addComponent(txtDatum))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel6))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cmbPotvrda, 0, 173, Short.MAX_VALUE)
                            .addComponent(cmbTipZapisnika, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(126, 126, 126)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnIzmeniObjekat)
                            .addComponent(btnObrisiObjekat)
                            .addComponent(btnSacuvajObjekat))))
                .addGap(117, 117, 117))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 822, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(125, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(212, 212, 212)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSacuvajObjekat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnIzmeniObjekat)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisiObjekat)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtZapisnikId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(cmbPotvrda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel16)
                                    .addComponent(cmbTipZapisnika, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)))
                        .addGap(0, 47, Short.MAX_VALUE))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(126, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void ucitajPodatkeUFormu() throws Exception {

       zapisnici = Controller.getInstance().loadSveZapisnike();
       DefaultTableModel modelZapisnika = (DefaultTableModel) tblZapisnik.getModel();
       modelZapisnika.setRowCount(0); 
        
        for (Zapisnik z : zapisnici) {
            modelZapisnika.addRow(new Object[]{z.getZapisnikID(), z.getDatumPrimopredaje(), z.getTip(), z.getPotvrdaID() });
        }
         
        potvrde = Controller.getInstance().loadSvePotvrde();
          if (cmbPotvrda != null) {
            cmbPotvrda.removeAllItems();
            for (Potvrda p : potvrde) {
                cmbPotvrda.addItem(String.valueOf(p.getPotvrdaID()));
            }
        } else {
            System.err.println("ComboBox (cmbPotvrda) je null.");
        }
    }

private void popuniFormuIzabranimZapisnikom(Zapisnik z) throws Exception {
        if (z != null) {
            txtZapisnikId.setText(String.valueOf(z.getZapisnikID()));
            cmbTipZapisnika.setSelectedItem(String.valueOf(z.getTip()));
            pronadjenePotvrde = Controller.getInstance().searchPotvrde("POTVRDAID='" + String.valueOf(z.getPotvrdaID() )+ "'");
            cmbPotvrda.setSelectedItem(pronadjenePotvrde.get(0).getPotvrdaID());
            
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            if (z.getDatumPrimopredaje()!= null) {
                txtDatum.setText(dateFormat.format(z.getDatumPrimopredaje()));
                originalDatum = z.getDatumPrimopredaje();
            } else {
                txtDatum.setText(""); 
            }
        }
    }


 private void setUpTableListenerZapisnik() {
        tblZapisnik.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Zapisnik z = jeIzabranZapisnik();
                    pronadjeniZapisnici = Controller.getInstance().searchZapisnici("ZAPISNIKID='" + String.valueOf(z.getZapisnikID()) + "'");
                    if (pronadjeniZapisnici != null && !pronadjeniZapisnici.isEmpty()) {
                        z = pronadjeniZapisnici.get(0);
                    }
                    popuniFormuIzabranimZapisnikom(z);
                    originalneVrednostiZapisnika.clear();
                } catch (Exception ex) {
                    Logger.getLogger(formZapisnik.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
 
  private Zapisnik jeIzabranZapisnik() {
        int zapisnikId = 0;
        int izabraniZapisnikIndex = tblZapisnik.getSelectedRow();
        if (izabraniZapisnikIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel)tblZapisnik.getModel();
            Object izabraniID = model.getValueAt(izabraniZapisnikIndex, 0);

            zapisnikId = (Integer) izabraniID;
        }
        Zapisnik z = new Zapisnik();
        z.setZapisnikID(zapisnikId);
        return z;            
  }
 
   private void resetujPoljaZaZapisnik() {
        txtZapisnikId.setText("");
        txtDatum.setText("dd-MM-yyyy");
        cmbPotvrda.setSelectedItem(0);
        cmbTipZapisnika.setSelectedItem(0);
    }
   
   private Zapisnik preuzmiPodatkeZaZapisnik() throws Exception {
        int zapisnikId = Integer.parseInt(txtZapisnikId.getText());
        
        if (cmbPotvrda.getSelectedItem() == null || cmbTipZapisnika.getSelectedItem() == null) {
            throw new Exception("Molimo vas da odaberete sve potrebne vrednosti iz padajucih menija.");
        }
        
        String tipZapisnika = (String) cmbTipZapisnika.getSelectedItem();
        
        String rawDatum = txtDatum.getText();
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date datum = null;
        try {

            if (!rawDatum.isEmpty()) {
                datum = inputFormat.parse(rawDatum);
            }
        } catch (ParseException e) {
            System.err.println("Neispravan format datuma: " + e.getMessage());

        }
        
        String potvrda = (String) cmbPotvrda.getSelectedItem();
        List<Potvrda> pronadjenaPotvrda = Controller.getInstance().searchPotvrde("POTVRDAID='" + potvrda + "'");

        if (pronadjenaPotvrda.isEmpty()) {
            throw new Exception("Potvrda nije pronadjena.");
        }
        int potvrdaId = pronadjenaPotvrda.get(0).getPotvrdaID();

        Zapisnik z = new Zapisnik(zapisnikId, datum, tipZapisnika, potvrdaId);
        return z;
    }

    private void btnSacuvajObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajObjekatActionPerformed
        try {
            Zapisnik zapisnik = preuzmiPodatkeZaZapisnik();
            Controller.getInstance().insertZapisnik(zapisnik);
            ucitajPodatkeUFormu();
            resetujPoljaZaZapisnik();
        } catch (Exception ex) {
            Logger.getLogger(formZapisnik.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnSacuvajObjekatActionPerformed

    private void btnIzmeniObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniObjekatActionPerformed
 try {
            Zapisnik z = preuzmiPodatkeZaZapisnik();
            Controller.getInstance().updateZapisnik(z);
            ucitajPodatkeUFormu();
            resetujPoljaZaZapisnik();
        } catch (Exception ex) {
            Logger.getLogger(formZapisnik.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnIzmeniObjekatActionPerformed

    private void btnObrisiObjekatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiObjekatActionPerformed
 try {
            Zapisnik z = jeIzabranZapisnik();
            Controller.getInstance().deleteZapisnik(z);
            ucitajPodatkeUFormu();
        } catch (Exception ex) {
            Logger.getLogger(formZapisnik.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Došlo je do greške: " + ex.getMessage(), "Greška", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnObrisiObjekatActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formZapisnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formZapisnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formZapisnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formZapisnik.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new formZapisnik().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(formZapisnik.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniObjekat;
    private javax.swing.JButton btnObrisiObjekat;
    private javax.swing.JButton btnSacuvajObjekat;
    private javax.swing.JComboBox<String> cmbPotvrda;
    private javax.swing.JComboBox<String> cmbTipZapisnika;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblZapisnik;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtZapisnikId;
    // End of variables declaration//GEN-END:variables
}
