/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import Controller.Controller;
import domain.object.entities.Rezervacija;
import domain.object.entities.StavkaRezervacije;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class formRezervacija extends javax.swing.JFrame {

    List<Rezervacija> rezervacije = new LinkedList<>();
    List<Rezervacija> pronadjeneRezervacije = new LinkedList<>();
    List<StavkaRezervacije> stavke = new LinkedList<>();
    List<StavkaRezervacije> pronadjeneStavke = new LinkedList<>();
    private final HashMap<Integer, String[]> originalneVrednosti = new HashMap<>();

    /**
     * Creates new form StavkaRezervacijeForm
     *
     * @throws java.lang.Exception
     */
    public formRezervacija() throws Exception {
        initComponents();
        setTitle("StavkaRezervacije");
        setLocationRelativeTo(this);
        ucitajStavke();
        ucitajRezervacije();
        setUpTableListenerStavkaRezervacije();
        setUpTableListenerRezervacija();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        btnObrisi = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtOpis = new javax.swing.JTextField();
        txtIDStavke = new javax.swing.JTextField();
        txtZaIsplatu = new javax.swing.JTextField();
        btnIzmeniRezervaciju = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbRezervacija = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRezervacija = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStavka = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Rezervacija");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel9.setText("Za isplatu");

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        jLabel1.setText("Stavka rezervacije");

        btnIzmeniRezervaciju.setText("Izmeni rezervaciju");
        btnIzmeniRezervaciju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniRezervacijuActionPerformed(evt);
            }
        });

        jLabel2.setText("ID stavke");

        jLabel3.setText("Opis");

        jLabel10.setText("Rezervacija");

        cmbRezervacija.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        tblRezervacija.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Rezervacije", "Datum rezervacije", "Kupoprodajna cena", "Ukupno za isplatu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRezervacija);

        tblStavka.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Stavka Id", "Rezervacija Id", "Opis", "Za isplatu"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblStavka);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(440, 440, 440)
                        .addComponent(jLabel10))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 857, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnIzmeniRezervaciju)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(380, 380, 380)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(btnSacuvaj)
                        .addGap(151, 151, 151)
                        .addComponent(btnIzmeni)
                        .addGap(171, 171, 171)
                        .addComponent(btnObrisi))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(123, 123, 123)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 733, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(cmbRezervacija, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(33, 33, 33)
                                        .addComponent(txtIDStavke, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(103, 103, 103)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel9))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtZaIsplatu, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtOpis, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtIDStavke, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(36, 36, 36)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtOpis, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(txtZaIsplatu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(210, 210, 210)
                        .addComponent(cmbRezervacija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSacuvaj)
                            .addComponent(btnIzmeni)
                            .addComponent(btnObrisi))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(68, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnIzmeniRezervaciju)
                        .addGap(121, 121, 121))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sacuvajOriginalneVrednosti(JTable table) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        originalneVrednosti.clear();

        for (int i = 0; i < model.getRowCount(); i++) {
            int rezervacijaID = Integer.parseInt(model.getValueAt(i, 0).toString());
            String datumRezervacije = model.getValueAt(i, 1).toString();
            float kupoprodajnaCena = (float) model.getValueAt(i, 2);
            String ukupnoZaIsplatu = model.getValueAt(i, 3).toString();

            originalneVrednosti.put(i, new String[]{String.valueOf(rezervacijaID), datumRezervacije, String.valueOf(kupoprodajnaCena), ukupnoZaIsplatu});

        }
    }
    
    private void ucitajStavke() throws Exception {
        stavke = Controller.getInstance().loadSveStavkeRezervacije();
        DefaultTableModel model = (DefaultTableModel) tblStavka.getModel();
        model.setRowCount(0); 
        
        for (StavkaRezervacije s : stavke) {
            model.addRow(new Object[]{s.getStavkaRezervacijeID(), s.getRezervacijaID(), s.getOpis(), s.getZaIsplatu()});
        }
    }

    private void ucitajRezervacije() throws Exception {
        rezervacije = Controller.getInstance().loadSveRezervacije();
        DefaultTableModel model = (DefaultTableModel) tblRezervacija.getModel();
        model.setRowCount(0);

        for (Rezervacija o : rezervacije) {
            model.addRow(new Object[]{o.getRezervacijaID(), o.getDatumRezervacije(), o.getKupoprodajnaCena(), o.getUkupnoZaIsplatu()});
        }

        if (cmbRezervacija != null) {
            cmbRezervacija.removeAllItems();
            for (Rezervacija o : rezervacije) {
                cmbRezervacija.addItem(String.valueOf(o.getRezervacijaID()));
            }
        } else {
            System.err.println("ComboBox (cmbRzervacija) je null.");
        }
        sacuvajOriginalneVrednosti(tblRezervacija);

    }

    
    private StavkaRezervacije jeIzabranaStavka() {
    int stavkaId = 0;
    int rezervacijaId=0;
    int izabranaStavkaIndeks = tblStavka.getSelectedRow();
    
    if (izabranaStavkaIndeks >= 0) {
        DefaultTableModel model = (DefaultTableModel) tblStavka.getModel();
        Object izabraniId = model.getValueAt(izabranaStavkaIndeks, 0);
        Object izabraniRezervacijaId= model.getValueAt(izabranaStavkaIndeks,1);
        
        try {
            stavkaId = Integer.parseInt(izabraniId.toString());
            rezervacijaId= Integer.parseInt(izabraniRezervacijaId.toString());
        } catch (NumberFormatException e) {
            System.err.println("Greska pri parsiranju ugovora id: " + e.getMessage());
        }
    }
    
    StavkaRezervacije u = new StavkaRezervacije();
    u.setStavkaRezervacijeID(stavkaId);
    u.setRezervacijaID(rezervacijaId);
    return u;
}
    
    private Rezervacija jeIzabranRezervacija() {
        int rezervacijaID = 0;
        int izabranRezervacijaIndex = tblRezervacija.getSelectedRow();
        if (izabranRezervacijaIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblRezervacija.getModel();
            Object izabraniID = model.getValueAt(izabranRezervacijaIndex, 0);

            rezervacijaID = (Integer) izabraniID;
        }
        Rezervacija o = new Rezervacija();
        o.setRezervacijaID(rezervacijaID);
        return o;
    }

    private void popuniTabeluStavkama(int rezervacijaId) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tblStavka.getModel();
        model.setRowCount(0);

        stavke = Controller.getInstance().searchStavkeRezervacije("REZERVACIJAID='" + String.valueOf(rezervacijaId) + "'");

        for (StavkaRezervacije s : stavke) {
            model.addRow(new Object[]{s.getStavkaRezervacijeID(), s.getRezervacijaID(), s.getOpis(), s.getZaIsplatu()});
        }
    }

    private void popuniFormuStavkom(StavkaRezervacije stavka) throws Exception {
        if (stavka != null) {
            txtIDStavke.setText(String.valueOf(stavka.getStavkaRezervacijeID()));
            txtOpis.setText(String.valueOf(stavka.getOpis()));
            txtZaIsplatu.setText(String.valueOf(stavka.getZaIsplatu()));

            pronadjeneRezervacije = Controller.getInstance().searchRezervacije("REZERVACIJAID='" + stavka.getStavkaRezervacijeID() + "'");

            if (cmbRezervacija != null) {
                cmbRezervacija.removeAllItems();
                for (Rezervacija o : rezervacije) {
                    cmbRezervacija.addItem(String.valueOf(o.getRezervacijaID()));
                }

                if (pronadjeneRezervacije != null && !pronadjeneRezervacije.isEmpty()) {
                    cmbRezervacija.setSelectedItem(String.valueOf(pronadjeneRezervacije.get(0).getRezervacijaID()));
                }
            } else {
                System.out.println("ComboBox (cmbRezervacija) je null.");
            }
        }
    }

    private void setUpTableListenerStavkaRezervacije() {
        tblStavka.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    StavkaRezervacije izabranaStavkaRezervacije = jeIzabranaStavka();
                    pronadjeneStavke = Controller.getInstance().searchStavkeRezervacije("STAVKAREZERVACIJEID='" + String.valueOf(izabranaStavkaRezervacije.getStavkaRezervacijeID()) + "'");

                    if (pronadjeneStavke != null && !pronadjeneStavke.isEmpty()) {
                        izabranaStavkaRezervacije = pronadjeneStavke.get(0);
                    }
                    popuniFormuStavkom(izabranaStavkaRezervacije);
                    originalneVrednosti.clear();
                    sacuvajOriginalneVrednosti(tblStavka);
                } catch (Exception ex) {
                    Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private void setUpTableListenerRezervacija() {
        tblRezervacija.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Rezervacija izabraniRezervacija = jeIzabranRezervacija();
                    pronadjeneRezervacije = Controller.getInstance().searchRezervacije("REZERVACIJAID='" + String.valueOf(izabraniRezervacija.getRezervacijaID()) + "'");

                    if (pronadjeneRezervacije != null && !pronadjeneRezervacije.isEmpty()) {
                        izabraniRezervacija = pronadjeneRezervacije.get(0);
                    }
                    popuniTabeluStavkama(izabraniRezervacija.getRezervacijaID());
                } catch (Exception ex) {
                    Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    private StavkaRezervacije preuzmiPodatkeZaStavku() throws Exception {
        int stavkaId = Integer.parseInt(txtIDStavke.getText());
        String naziv = txtOpis.getText();
        float zaIsplatu = Float.parseFloat(txtZaIsplatu.getText());
        String Rezervacija = (String) cmbRezervacija.getSelectedItem();
        List<Rezervacija> pronadjenRezervacija = Controller.getInstance().searchRezervacije("REZERVACIJAID='" + Rezervacija + "'");

        if (pronadjenRezervacija.isEmpty()) {
            throw new Exception("Rezervacija nije pronadjena.");
        }
        int rezervacijaId = pronadjenRezervacija.get(0).getRezervacijaID();

        StavkaRezervacije stavka = new StavkaRezervacije(stavkaId, rezervacijaId, naziv, zaIsplatu);

        return stavka;
    }
  
    public String generisiSetKlauzuRezervacija(JTable table, int selectedRow) {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        StringBuilder setClause = new StringBuilder();

        int idRezervacije = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());

        System.out.println("Svi sacuvani ID-jevi: " + originalneVrednosti.keySet());
        if (!originalneVrednosti.containsKey(idRezervacije)) {
            System.out.println("ID rezervacije nije pronadjen u originalnim vrednostima: " + idRezervacije);
            return "";
        }

        String[] original = originalneVrednosti.get(idRezervacije);
        //String datum = model.getValueAt(selectedRow, 1) != null ? model.getValueAt(selectedRow, 1).toString() : "0";
        //String kupoprodajnaCena = model.getValueAt(selectedRow, 2) != null ? model.getValueAt(selectedRow, 2).toString() : "";
        String ukupnoZaisplatu = model.getValueAt(selectedRow, 3) != null ? model.getValueAt(selectedRow, 3).toString() : "0";
       // String originalniDatum = original[0];
        //String originalnaKupoprodajnaCena = original[1];
        String originalnoUkupnoZaIsplatu = original[3];

//        if (!datum.equals(originalniDatum)) {
//            setClause.append("DATUMREZERVACIJE = '").append(datum).append("'");
//        }

//        if (!kupoprodajnaCena.equals(originalnaKupoprodajnaCena)) {
//            setClause.append("KUPOPRODAJNACENA = '").append(kupoprodajnaCena).append("'");
//        }
        if (!ukupnoZaisplatu.equals(originalnoUkupnoZaIsplatu)) {
            if (setClause.length() > 0) {
                setClause.append(", ");
            }
            setClause.append("UKUPNOZAISPLATU = ").append(ukupnoZaisplatu);
        }

        System.out.println("Generisana SET klauzula: " + setClause.toString());

        return setClause.toString();
    }


    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
        try {
            StavkaRezervacije stavka = preuzmiPodatkeZaStavku();

            Controller.getInstance().insertStavkaRezervacije(stavka);

            ucitajStavke();
            ucitajRezervacije();
        } catch (Exception ex) {
            Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
        try {
            StavkaRezervacije stavka = preuzmiPodatkeZaStavku();
            Controller.getInstance().updateStavkaRezervacije(stavka);
            ucitajStavke();
            ucitajRezervacije();
        } catch (Exception ex) {
            Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        try {
            StavkaRezervacije stavka = jeIzabranaStavka();
            Controller.getInstance().deleteStavkaRezervacije(stavka);
            ucitajStavke();
            ucitajRezervacije();

        } catch (Exception ex) {
            Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    private void btnIzmeniRezervacijuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniRezervacijuActionPerformed
        try {
            Rezervacija o = jeIzabranRezervacija();
            String setClause = generisiSetKlauzuRezervacija(tblRezervacija, tblRezervacija.getSelectedRow());
            Controller.getInstance().updateRezervacija(o, setClause);
            ucitajRezervacije();
        } catch (Exception ex) {
            Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniRezervacijuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formRezervacija.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new formRezervacija().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(formRezervacija.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnIzmeniRezervaciju;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<String> cmbRezervacija;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblRezervacija;
    private javax.swing.JTable tblStavka;
    private javax.swing.JTextField txtIDStavke;
    private javax.swing.JTextField txtOpis;
    private javax.swing.JTextField txtZaIsplatu;
    // End of variables declaration//GEN-END:variables
}
