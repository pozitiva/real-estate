/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import Controller.Controller;
import domain.object.entities.Agencija_Pogled;
import domain.object.entities.KatastarskaParcela;
import domain.object.entities.Nekretnina;
import domain.object.entities.UgovorOPosredovanju;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class formNekretnina extends javax.swing.JFrame {

    List<Nekretnina> nekretnine = new LinkedList<>();
    List<Nekretnina> pronadjeneNekretnine = new LinkedList<>();
    List<KatastarskaParcela> parcele = new LinkedList<>();
    List<KatastarskaParcela> pronadjeneParcele = new LinkedList<>();
    List<UgovorOPosredovanju> ugovori = new LinkedList<>();
    List<UgovorOPosredovanju> pronadjeniUgovori = new LinkedList<>();
    List<Agencija_Pogled> agencije = new LinkedList<>();

    private final HashMap<Integer, String[]> originalneVrednostiNekretnine = new HashMap<>();

    public formNekretnina() throws Exception {
        initComponents();
        setTitle("Nekretnina");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListenerNekretnina();
        setUpTableListenerUgovor();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtBrojStana = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUgovor = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        btnSacuvajUgovor = new javax.swing.JButton();
        btnIzmeniUgovor = new javax.swing.JButton();
        txtDatum = new javax.swing.JTextField();
        btnObrisiUgovor = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblNekretnina = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        btnSacuvajNekretninu = new javax.swing.JButton();
        btnIzmeniNekretninu = new javax.swing.JButton();
        btnObrisiNekretninu = new javax.swing.JButton();
        txtNekretninaID = new javax.swing.JTextField();
        txtCena = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        txtPovrsina = new javax.swing.JTextField();
        txtUgovorId = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        cmbBrParcele = new javax.swing.JComboBox<>();
        cmbNekretnina = new javax.swing.JComboBox<>();
        jLabel19 = new javax.swing.JLabel();
        cmbAgencija = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        cmbBrParceleNekretnina = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblUgovor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Ugovora o posredovanju", "Datum potpisivanja", "ID Nekretnine", "Broj parcele", "Agencija"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUgovor.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblUgovor);

        jLabel1.setText("Nekretnina");

        jLabel2.setText("ID nekretnine");

        jLabel3.setText("ID ugovora");

        jLabel4.setText("Datum potpisivanja");

        jLabel15.setText("Povrsina");

        btnSacuvajUgovor.setText("Sacuvaj");
        btnSacuvajUgovor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajUgovorActionPerformed(evt);
            }
        });

        btnIzmeniUgovor.setText("Izmeni");
        btnIzmeniUgovor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniUgovorActionPerformed(evt);
            }
        });

        txtDatum.setText("dd-MM-yyyy");

        btnObrisiUgovor.setText("Obrisi");
        btnObrisiUgovor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiUgovorActionPerformed(evt);
            }
        });

        tblNekretnina.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Nekretnine", "Broj Stana", "Povrsina", "Cena"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblNekretnina);

        jLabel5.setText("Broj stana");

        btnSacuvajNekretninu.setText("Sacuvaj");
        btnSacuvajNekretninu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajNekretninuActionPerformed(evt);
            }
        });

        btnIzmeniNekretninu.setText("Izmeni");
        btnIzmeniNekretninu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniNekretninuActionPerformed(evt);
            }
        });

        btnObrisiNekretninu.setText("Obrisi");
        btnObrisiNekretninu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiNekretninuActionPerformed(evt);
            }
        });

        jLabel25.setText("Cena");

        jLabel17.setText("Broj parcele");

        jLabel18.setText("Agencija ");

        cmbBrParcele.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbBrParcele.setEnabled(false);

        cmbNekretnina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel19.setText("Nekretnina");

        cmbAgencija.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel20.setText("Broj parcele");

        cmbBrParceleNekretnina.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(95, 95, 95)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNekretninaID, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtBrojStana, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel25))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtPovrsina, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(jLabel20)
                                .addGap(48, 48, 48)
                                .addComponent(cmbBrParceleNekretnina, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(42, 42, 42))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtUgovorId, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(49, 49, 49)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel19)
                                    .addComponent(jLabel17))
                                .addGap(51, 51, 51)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbBrParcele, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbNekretnina, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(63, 63, 63)
                                .addComponent(jLabel18)
                                .addGap(27, 27, 27)
                                .addComponent(cmbAgencija, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1004, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnIzmeniNekretninu)
                    .addComponent(btnObrisiNekretninu)
                    .addComponent(btnSacuvajNekretninu)
                    .addComponent(btnSacuvajUgovor)
                    .addComponent(btnObrisiUgovor)
                    .addComponent(btnIzmeniUgovor))
                .addGap(0, 0, 0))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane2)
                    .addGap(79, 79, 79)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(212, 212, 212)
                .addComponent(btnSacuvajNekretninu)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel2)
                                    .addComponent(txtNekretninaID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(txtBrojStana, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel25)
                                    .addComponent(txtCena, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel15)
                                .addComponent(txtPovrsina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(cmbBrParceleNekretnina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(29, 29, 29)))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(txtUgovorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel19))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txtDatum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel17))
                                    .addComponent(jLabel4)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(cmbAgencija, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbNekretnina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(cmbBrParcele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 84, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnIzmeniNekretninu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnObrisiNekretninu)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnObrisiUgovor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSacuvajUgovor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnIzmeniUgovor)
                        .addGap(67, 67, 67))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(505, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void ucitajPodatkeUFormu() throws Exception {
       nekretnine = Controller.getInstance().loadSveNekretnine();
       DefaultTableModel modelNekretnine = (DefaultTableModel) tblNekretnina.getModel();

       modelNekretnine.setRowCount(0); 
        for (Nekretnina n: nekretnine) {
            modelNekretnine.addRow(new Object[]{n.getNekretninaID(), n.getBrojStana(), n.getPovrsina(), n.getCena()});
        }
         if (cmbNekretnina != null) {
            cmbNekretnina.removeAllItems();
            for (Nekretnina o : nekretnine) {
                cmbNekretnina.addItem(String.valueOf(o.getNekretninaID()));
            }
        } else {
            System.err.println("ComboBox (cmbNekretnina) je null.");
        }
         
        agencije= Controller.getInstance().loadSveAgencije(); 
        if (cmbAgencija != null) {
            cmbAgencija.removeAllItems();
            for (Agencija_Pogled a : agencije) {
                cmbAgencija.addItem(a.getNaziv());
            }
        } else {
            System.err.println("ComboBox (cmbAgencija) je null.");
        }
         
         ucitajBrojParceleZaNekretninu();
         ucitajBrojParcele();
    }

  private void ucitajBrojParceleZaNekretninu() throws Exception {
    cmbBrParceleNekretnina.removeAllItems(); 
    parcele = Controller.getInstance().loadSveKatastarskeParcele();
    
    Set<String> jedinstveniKatastarskiBr = new HashSet<>();
    for (KatastarskaParcela k : parcele) {
        jedinstveniKatastarskiBr.add(String.valueOf(k.getBrojParcele()));
    }
    
    for (String bp : jedinstveniKatastarskiBr) {
        cmbBrParceleNekretnina.addItem(bp);
    }
}

  private void ucitajBrojParcele() throws Exception {
    cmbBrParcele.removeAllItems(); 
    parcele = Controller.getInstance().loadSveKatastarskeParcele();
    
    Set<String> jedinstveniKatastarskiBr = new HashSet<>();
    for (KatastarskaParcela k : parcele) {
        jedinstveniKatastarskiBr.add(String.valueOf(k.getBrojParcele()));
    }
    
    for (String bp : jedinstveniKatastarskiBr) {
        cmbBrParcele.addItem(bp);
    }
}
  private void popuniFormuIzabranomNekretninom(Nekretnina n) throws Exception {
        if (n != null) {
            txtNekretninaID.setText(String.valueOf(n.getNekretninaID()));
            txtBrojStana.setText(String.valueOf(n.getBrojStana()));
            txtPovrsina.setText(String.valueOf(n.getPovrsina()));
            txtCena.setText(String.valueOf(n.getCena()));
            cmbBrParceleNekretnina.setSelectedItem(String.valueOf(n.getBrojParcele()));
        }
    }

 private void setUpTableListenerNekretnina() {
        tblNekretnina.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Nekretnina n = jeIzabranaNekretnina();
                    pronadjeneNekretnine = Controller.getInstance().searchNekretnine("NEKRETNINAID='" + String.valueOf(n.getNekretninaID()) + "'");
                    if (pronadjeneNekretnine != null && !pronadjeneNekretnine.isEmpty()) {
                        n = pronadjeneNekretnine.get(0);
                    }
                    popuniFormuIzabranomNekretninom(n);
                    popuniTabeluUgovorima(n.getNekretninaID());
                    originalneVrednostiNekretnine.clear();
                } catch (Exception ex) {
                    Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
 
  private Nekretnina jeIzabranaNekretnina() {
        int nekretninaId = 0;
        int izabranaNekretninaIndex = tblNekretnina.getSelectedRow();
        if (izabranaNekretninaIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblNekretnina.getModel();
            Object izabraniID = model.getValueAt(izabranaNekretninaIndex, 0);

            nekretninaId = (Integer) izabraniID;
        }
        Nekretnina n = new Nekretnina();
        n.setNekretninaID(nekretninaId);
        return n;            }
 
  private void popuniTabeluUgovorima(int idNekretnine) throws Exception {
        DefaultTableModel model = (DefaultTableModel) tblUgovor.getModel();
        model.setRowCount(0);
        
        ugovori = Controller.getInstance().searchUgovoriOPosredovanju("NEKRETNINAID='" + String.valueOf(idNekretnine) + "'");

        for (UgovorOPosredovanju u : ugovori) {
            model.addRow(new Object[]{u.getUgovorOPosredovanjuID(), u.getDatumPotpisivanja(), u.getNekretninaID(), u.getBrojParcele(), u.getAgencijaID()});
        }            
  }
 
  private UgovorOPosredovanju jeIzabranUgovor() {
        int ugovorID = 0;
        int izabranUgovorIndex = tblUgovor.getSelectedRow();
        if (izabranUgovorIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblUgovor.getModel();
            Object izabraniID = model.getValueAt(izabranUgovorIndex, 0);

            ugovorID = (Integer) izabraniID;
        }
        UgovorOPosredovanju u = new UgovorOPosredovanju();
        u.setUgovorOPosredovanjuID(ugovorID);
        return u;     
  }
 
  private void setUpTableListenerUgovor() {
        tblUgovor.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    UgovorOPosredovanju izabranUgovor = jeIzabranUgovor();
                    pronadjeniUgovori = Controller.getInstance().searchUgovoriOPosredovanju("UGOVOROPOSREDOVANJUID='" + String.valueOf(izabranUgovor.getUgovorOPosredovanjuID())+ "'");
                    
                    if (pronadjeniUgovori != null && !pronadjeniUgovori.isEmpty()) {
                        izabranUgovor = pronadjeniUgovori.get(0);
                    }
                    popuniFormuUgovorom(izabranUgovor);
                } catch (Exception ex) {
                    Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
  
  private void popuniFormuUgovorom(UgovorOPosredovanju izabranUgovor) throws Exception {
        if (izabranUgovor != null) {
            txtUgovorId.setText(String.valueOf(izabranUgovor.getUgovorOPosredovanjuID()));
            SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
            if (izabranUgovor.getDatumPotpisivanja() == null) {
                System.out.println("Greska: Datum je null!");
             return;
            }
            txtDatum.setText(dateFormat.format(izabranUgovor.getDatumPotpisivanja()));

            if (izabranUgovor.getAgencijaID()!= null) {
                List<Agencija_Pogled> agencija = Controller.getInstance().searchAgencije("MATICNIBROJ='" + izabranUgovor.getAgencijaID() + "'");
                if (!agencija.isEmpty()) {
                    cmbAgencija.setSelectedItem(agencija.get(0).toString());
                }
            }

            if (izabranUgovor.getNekretninaID() != 0) {
                List<Nekretnina> nekretnina = Controller.getInstance().searchNekretnine("NEKRETNINAID='" + izabranUgovor.getNekretninaID() + "'");
                if (!nekretnina.isEmpty()) {
                    cmbNekretnina.setSelectedItem(String.valueOf(nekretnina.get(0).getNekretninaID()));
                }
            }
            pronadjeneParcele = Controller.getInstance().searchKatastarskeParcele("BROJPARCELE='" + String.valueOf(izabranUgovor.getBrojParcele()) + "'");

            cmbBrParcele.setSelectedItem(String.valueOf(pronadjeneParcele.get(0).getBrojParcele()));
        }
    }
  
   private Nekretnina preuzmiPodatkeZaNekretninu() throws Exception {
        int idNekretnine = Integer.parseInt(txtNekretninaID.getText());
        String brojStana = txtBrojStana.getText();
        float povrsina = txtPovrsina.getText().isEmpty() ? 0 : Float.parseFloat(txtPovrsina.getText());
        float cena = txtCena.getText().isEmpty() ? 0 : Float.parseFloat(txtCena.getText());
        
        Object izabranaKatastarskaParcela = cmbBrParceleNekretnina.getSelectedItem();
        pronadjeneParcele = Controller.getInstance().searchKatastarskeParcele("BROJPARCELE='" + izabranaKatastarskaParcela.toString() + "'");
        String parcelaId = String.valueOf(((KatastarskaParcela) pronadjeneParcele.get(0)).getBrojParcele());
       
        Nekretnina n = new Nekretnina(idNekretnine, brojStana, povrsina, cena, parcelaId);
        return n;
    }

  private UgovorOPosredovanju preuzmiPodatkeZaUgovor() throws Exception {
        int idUgovora = Integer.parseInt(txtUgovorId.getText());
        String rawDatum = txtDatum.getText();
        SimpleDateFormat inputFormat = new SimpleDateFormat("dd-MM-yyyy");
        Date datum = null;
        try {
            if (!rawDatum.isEmpty()) {
                datum = inputFormat.parse(rawDatum);
            }
        } catch (ParseException e) {
            System.err.println("Neispravan format datuma: " + e.getMessage());
        }
      
        if (cmbBrParcele.getSelectedItem() == null || cmbNekretnina.getSelectedItem() == null ||
            cmbAgencija.getSelectedItem() == null) {
            throw new Exception("Molimo vas da odaberete sve potrebne vrednosti iz padajucih menija.");
        }
        
        int idNekretnine = Integer.parseInt((String) cmbNekretnina.getSelectedItem());
        
        String agencija = (String) cmbAgencija.getSelectedItem();
        List<Agencija_Pogled> pronadjeneAgencije = Controller.getInstance().searchAgencije("naziv='" + agencija + "'");

        if (pronadjeneAgencije.isEmpty()) {
            throw new Exception("Agencija sa imenom " + agencija + " nije pronadjena.");
        }

        String maticniBrojAgencije = pronadjeneAgencije.get(0).getMaticniBroj(); 
        
        Object izabranaKatParcela = cmbBrParcele.getSelectedItem();
        pronadjeneParcele = Controller.getInstance().searchKatastarskeParcele("BROJPARCELE='" + izabranaKatParcela.toString() + "'");
        String brojParcele = pronadjeneParcele.get(0).getBrojParcele();
        
        UgovorOPosredovanju u = new UgovorOPosredovanju(idUgovora, datum, idNekretnine, brojParcele, maticniBrojAgencije);

        return u;
    }
  

    private void btnSacuvajUgovorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajUgovorActionPerformed
        try {
            UgovorOPosredovanju u = preuzmiPodatkeZaUgovor();
            Controller.getInstance().insertUgovorOPosredovanju(u);
            popuniTabeluUgovorima(u.getNekretninaID());
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnSacuvajUgovorActionPerformed

    private void btnIzmeniUgovorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniUgovorActionPerformed
        try {
            UgovorOPosredovanju u = preuzmiPodatkeZaUgovor();
            Controller.getInstance().updateUgovorOPosredovanju(u);
            popuniTabeluUgovorima(u.getNekretninaID());
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_btnIzmeniUgovorActionPerformed

    private void btnObrisiUgovorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiUgovorActionPerformed
        try {
            UgovorOPosredovanju u = jeIzabranUgovor();
            Controller.getInstance().deleteUgovorOPosredovanju(u);
            popuniTabeluUgovorima(u.getNekretninaID());
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }  
    }//GEN-LAST:event_btnObrisiUgovorActionPerformed

    private void btnSacuvajNekretninuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajNekretninuActionPerformed
        try {
            Nekretnina nekretnina = preuzmiPodatkeZaNekretninu();
            Controller.getInstance().insertNekretnina(nekretnina);
            ucitajPodatkeUFormu();
            resetujPoljaZaNekretninu();
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnSacuvajNekretninuActionPerformed
    
    private void resetujPoljaZaNekretninu() {
        txtNekretninaID.setText("");
        txtBrojStana.setText("");
        txtPovrsina.setText("");
        txtCena.setText("");
        cmbBrParceleNekretnina.setSelectedIndex(0); 
    }

    private void btnIzmeniNekretninuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniNekretninuActionPerformed
        try {
            Nekretnina n = preuzmiPodatkeZaNekretninu();
            Controller.getInstance().updateNekretnina(n);
            ucitajPodatkeUFormu();
            resetujPoljaZaNekretninu();
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnIzmeniNekretninuActionPerformed

    private void btnObrisiNekretninuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiNekretninuActionPerformed
        try {
            Nekretnina n = jeIzabranaNekretnina();
            Controller.getInstance().deleteNekretnina(n);
            ucitajPodatkeUFormu();
        } catch (Exception ex) {
            Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }    }//GEN-LAST:event_btnObrisiNekretninuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formNekretnina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formNekretnina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formNekretnina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formNekretnina.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new formNekretnina().setVisible(true);
            } catch (Exception ex) {
                Logger.getLogger(formNekretnina.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeniNekretninu;
    private javax.swing.JButton btnIzmeniUgovor;
    private javax.swing.JButton btnObrisiNekretninu;
    private javax.swing.JButton btnObrisiUgovor;
    private javax.swing.JButton btnSacuvajNekretninu;
    private javax.swing.JButton btnSacuvajUgovor;
    private javax.swing.JComboBox<String> cmbAgencija;
    private javax.swing.JComboBox<String> cmbBrParcele;
    private javax.swing.JComboBox<String> cmbBrParceleNekretnina;
    private javax.swing.JComboBox<String> cmbNekretnina;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblNekretnina;
    private javax.swing.JTable tblUgovor;
    private javax.swing.JTextField txtBrojStana;
    private javax.swing.JTextField txtCena;
    private javax.swing.JTextField txtDatum;
    private javax.swing.JTextField txtNekretninaID;
    private javax.swing.JTextField txtPovrsina;
    private javax.swing.JTextField txtUgovorId;
    // End of variables declaration//GEN-END:variables
}
