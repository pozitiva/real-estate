/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Forms;

import Controller.Controller;
import domain.object.entities.Adresa;
import domain.object.entities.Grad;
import domain.object.entities.LicnaKarta;
import domain.object.entities.Osoba;
import java.awt.event.ActionEvent;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author korisnik
 */
public class formOsoba extends javax.swing.JFrame {

    List<LicnaKarta> licneKarte = new LinkedList<>();
    List<LicnaKarta> pronadjeneLicneKarte = new LinkedList<>();
    List<Adresa> adrese = new LinkedList<>();
    List<Adresa> pronadjeneAdrese = new LinkedList<>();
    List<Grad> gradovi = new LinkedList<>();
    List<Osoba> osobe = new LinkedList<>();
    List<Osoba> pronadjeneOsobe = new LinkedList<>();
    
    public formOsoba() throws Exception {
        initComponents();
        setTitle("Osoba");
        setLocationRelativeTo(this);
        ucitajPodatkeUFormu();
        setUpTableListener();
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel9 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtJmbg = new javax.swing.JTextField();
        cmbGrad = new javax.swing.JComboBox<>();
        cmbLicnaKarta = new javax.swing.JComboBox<>();
        cmbAdresa = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        btnSacuvaj = new javax.swing.JButton();
        btnIzmeni = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnObrisi = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblOsoba = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        txtImePrezime = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel9.setText("Grad");

        jLabel2.setText("Ime i prezime");

        cmbGrad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbGrad.setSelectedIndex(-1);

        cmbLicnaKarta.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        cmbAdresa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("JMBG");

        btnSacuvaj.setText("Sacuvaj");
        btnSacuvaj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSacuvajActionPerformed(evt);
            }
        });

        btnIzmeni.setText("Izmeni");
        btnIzmeni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIzmeniActionPerformed(evt);
            }
        });

        jLabel11.setText("Broj licne karte");

        jLabel1.setText("Osoba");

        btnObrisi.setText("Obrisi");
        btnObrisi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnObrisiActionPerformed(evt);
            }
        });

        tblOsoba.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "JMBG", "Ime i prezime", "Broj licne karte", "Adresa", "Grad"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblOsoba);

        jLabel7.setText("Adresa");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbLicnaKarta, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtJmbg, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtImePrezime, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(87, 87, 87)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jLabel7))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbGrad, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSacuvaj)
                    .addComponent(btnIzmeni)
                    .addComponent(btnObrisi))
                .addGap(0, 33, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(349, 349, 349)
                        .addComponent(jLabel1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnIzmeni)
                        .addGap(18, 18, 18)
                        .addComponent(btnSacuvaj)
                        .addGap(18, 18, 18)
                        .addComponent(btnObrisi))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(cmbAdresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(cmbGrad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtImePrezime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtJmbg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(cmbLicnaKarta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
   private void ucitajPodatkeUFormu() throws Exception {
    licneKarte = Controller.getInstance().loadSveLicneKarte();
    cmbLicnaKarta.removeAllItems();
    for (LicnaKarta lk : licneKarte) {
        cmbLicnaKarta.addItem(lk.getBrojLK());
    }
    ucitajGradove();
    cmbGrad.addActionListener((ActionEvent evt) -> {
        try {
            ucitajAdreseZaGradove();
        } catch (Exception ex) {
            Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
        }
    });
    
    cmbAdresa.setEnabled(false);

    ucitajOsobe();
}

    private void ucitajGradove() throws Exception {
        adrese = Controller.getInstance().loadSveAdrese();
        cmbGrad.removeAllItems();
        Set<String> jedinstveniGradId = new HashSet<>();
        for (Adresa a : adrese) {
            jedinstveniGradId.add(String.valueOf(a.getGradID()));
        }
        for (String gradId : jedinstveniGradId) {
            cmbGrad.addItem(gradId);
        }
    }

    private void ucitajAdreseZaGradove() throws Exception {
    String izabraniGradId = (String) cmbGrad.getSelectedItem();
    cmbAdresa.removeAllItems();
    
        if (izabraniGradId != null) {
            List<Adresa> filtriraneAdrese = Controller.getInstance().searchAdrese("GRADID='" + String.valueOf(izabraniGradId) + "'");

            cmbAdresa.removeAllItems();  
            for (Adresa a : filtriraneAdrese) {
                System.out.println("Dodajem adresu: " + a.getUlicaIBroj());
                cmbAdresa.addItem(a.getUlicaIBroj());  
            }
            cmbAdresa.setEnabled(!filtriraneAdrese.isEmpty());
        }
    }
    
    private void resetujPoljaZaOsobu() {
        txtImePrezime.setText("");
        txtJmbg.setText("");
        cmbAdresa.setSelectedIndex(0); 
        cmbGrad.setSelectedIndex(0);
        cmbLicnaKarta.setSelectedIndex(0);
    }

    public void ucitajOsobe() throws Exception {
        DefaultTableModel modelOsobe = (DefaultTableModel) tblOsoba.getModel();
        modelOsobe.setRowCount(0);
        osobe = Controller.getInstance().loadSveOsobe();

        for (Osoba o : osobe) {
            modelOsobe.addRow(new Object[]{o.getJMBG(), o.getImePrezime(), o.getBrojLK(), o.getAdresaID(), o.getGradID()});
        }
    }

    private Osoba jeIzabranaOsoba() {
        String osobaJmbg = "";
        int izabranaOsobaIndex = tblOsoba.getSelectedRow();
        if (izabranaOsobaIndex >= 0) {
            DefaultTableModel model = (DefaultTableModel) tblOsoba.getModel();
            Object izabranJmbg = model.getValueAt(izabranaOsobaIndex, 0);
            osobaJmbg =  izabranJmbg.toString();
        }
        Osoba o = new Osoba();
        o.setJMBG(osobaJmbg);
        return o;
    }
    
      private void setUpTableListener() {
        tblOsoba.getSelectionModel().addListSelectionListener((ListSelectionEvent event) -> {
            if (!event.getValueIsAdjusting()) {
                try {
                    Osoba izabranaOsoba = jeIzabranaOsoba();
                    pronadjeneOsobe = Controller.getInstance().searchOsobe("JMBG='" + String.valueOf(izabranaOsoba.getJMBG()) + "'");
                    
                    if (pronadjeneOsobe != null && !pronadjeneOsobe.isEmpty()) {
                        izabranaOsoba = pronadjeneOsobe.get(0);
                    }
                    popuniFormuIzabranomOsobom(izabranaOsoba);
                } catch (Exception ex) {
                    Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
      
    private void popuniFormuIzabranomOsobom(Osoba o) throws Exception {
        if (o != null) {
            txtJmbg.setText(String.valueOf(o.getJMBG()));
            txtImePrezime.setText(String.valueOf(o.getImePrezime()));
      
            pronadjeneAdrese = Controller.getInstance().searchAdrese("GRADID='" + String.valueOf(o.getGradID()) + "' AND ADRESAID='" + String.valueOf(o.getAdresaID()) + "'");
            
            cmbGrad.setSelectedItem(String.valueOf(pronadjeneAdrese.get(0).getGradID()));
            cmbAdresa.setEnabled(true);
            cmbAdresa.setSelectedItem(String.valueOf(pronadjeneAdrese.get(0).getUlicaIBroj()));

            pronadjeneLicneKarte = Controller.getInstance().searchLicneKarte("BROJLK='" + String.valueOf(o.getBrojLK()) + "'");
            cmbLicnaKarta.setSelectedItem(pronadjeneLicneKarte.get(0).getBrojLK());
        }
    }
       
    private Osoba preuzmiPodatkeZaOsobu() throws Exception {
        String osobaJmbg = txtJmbg.getText();
        String imePrezime = txtImePrezime.getText();

        String licnaKarta = cmbLicnaKarta.getSelectedItem().toString();
        pronadjeneLicneKarte = Controller.getInstance().searchLicneKarte("BROJLK='" + licnaKarta + "'");

        if (pronadjeneLicneKarte.isEmpty()) {
        throw new Exception("Licna karta nije pronadjena.");
        }

        LicnaKarta izabranaLicnaKarta = pronadjeneLicneKarte.get(0);
        String brLk = izabranaLicnaKarta.getBrojLK();

        Object izabraniGrad = cmbGrad.getSelectedItem();
        int gradId = Integer.parseInt(izabraniGrad.toString());
        
        Object izabranaAdresa = cmbAdresa.getSelectedItem();
        pronadjeneAdrese = Controller.getInstance().searchAdrese("ULICABROJ='" + izabranaAdresa.toString() + "'");
        int adresaId = pronadjeneAdrese.get(0).getAdresaID();

        Osoba o = new Osoba(osobaJmbg, imePrezime, brLk, adresaId, gradId);
        return o;
    }
    
    private void btnSacuvajActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSacuvajActionPerformed
         try {
            Osoba osoba = preuzmiPodatkeZaOsobu();
            Controller.getInstance().insertOsobe(osoba);
            resetujPoljaZaOsobu();
            ucitajOsobe();
        } catch (Exception ex) {
            Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSacuvajActionPerformed

    private void btnIzmeniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIzmeniActionPerformed
         try {
            Osoba o = preuzmiPodatkeZaOsobu();
            Controller.getInstance().updateOsoba(o);
            resetujPoljaZaOsobu();
            ucitajOsobe();
        } catch (Exception ex) {
            Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnIzmeniActionPerformed

    private void btnObrisiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnObrisiActionPerformed
        try {
            Osoba o = jeIzabranaOsoba();
            Controller.getInstance().deleteOsoba(o);
            resetujPoljaZaOsobu();
            ucitajOsobe();
        } catch (Exception ex) {
            Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Doslo je do greske: " + ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnObrisiActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(formOsoba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(formOsoba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(formOsoba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formOsoba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new formOsoba().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(formOsoba.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnIzmeni;
    private javax.swing.JButton btnObrisi;
    private javax.swing.JButton btnSacuvaj;
    private javax.swing.JComboBox<String> cmbAdresa;
    private javax.swing.JComboBox<String> cmbGrad;
    private javax.swing.JComboBox<String> cmbLicnaKarta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblOsoba;
    private javax.swing.JTextField txtImePrezime;
    private javax.swing.JTextField txtJmbg;
    // End of variables declaration//GEN-END:variables
}
